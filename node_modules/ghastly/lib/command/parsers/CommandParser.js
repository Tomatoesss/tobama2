'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _ClosureFilter = require('../../client/dispatcher/ClosureFilter');

var _ClosureFilter2 = _interopRequireDefault(_ClosureFilter);

var _CommandParserError = require('../../errors/CommandParserError');

var _CommandParserError2 = _interopRequireDefault(_CommandParserError);

var _ParsedCommand = require('./ParsedCommand');

var _ParsedCommand2 = _interopRequireDefault(_ParsedCommand);

var _RegexFilter = require('../../client/dispatcher/RegexFilter');

var _RegexFilter2 = _interopRequireDefault(_RegexFilter);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @desc Handles parsing a message for a command.
 * @ignore
 */
class CommandParser {
  /**
   * Parses the given message for a command.
   * @param {Message} message - The Discord.js `Message` object.
   * @param {PrefixFilter} prefixFilter - The prefix filter.
   * @returns {ParsedCommand} Data parsed from the message content.
   * @throws {CommandParserError} Thrown if the given message could not be parsed as a command.
   */
  static parse(message, prefixFilter) {
    if (prefixFilter instanceof _ClosureFilter2.default) {
      const split = message.content.split(' ').filter(word => word);
      const [identifier, ...args] = split;

      return new _ParsedCommand2.default({
        raw: message.content,
        trimmed: message.content,
        identifier,
        args,
        rawArgs: args.join(' ')
      });
    } else if (prefixFilter instanceof _RegexFilter2.default) {
      const trimmed = message.content.replace(prefixFilter.filter, '').trim();
      const split = trimmed.split(' ').filter(word => word);

      if (!split.length) {
        throw new _CommandParserError2.default('Message does not contain enough words to specify a command.');
      }

      const [identifier, ...args] = split;

      return new _ParsedCommand2.default({
        raw: message.content,
        trimmed,
        identifier,
        args,
        rawArgs: args.join(' ')
      });
    }

    throw new _CommandParserError2.default('Unrecognized prefix filter type.');
  }
}
exports.default = CommandParser;