'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _discord = require('discord.js');

var _lang = require('lodash/lang');

var _CommandRegistry = require('../command/CommandRegistry');

var _CommandRegistry2 = _interopRequireDefault(_CommandRegistry);

var _Dispatcher = require('./dispatcher/Dispatcher');

var _Dispatcher2 = _interopRequireDefault(_Dispatcher);

var _ServiceContainer = require('./services/ServiceContainer');

var _ServiceContainer2 = _interopRequireDefault(_ServiceContainer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

/**
 * @external {ClientOptions} https://discord.js.org/#/docs/main/stable/typedef/ClientOptions
 */

/**
 * @desc The Ghastly client.
 * @extends Client
 */
class Ghastly extends _discord.Client {
  /**
   * Constructor.
   * @param {ClientOptions} options - The options for the client.
   * @param {string} options.prefix - The prefix for the client's dispatcher.
   * @throws {TypeError} Thrown if any option is of the wrong type.
   */
  constructor(options) {
    const { prefix } = options,
          rest = _objectWithoutProperties(options, ['prefix']);

    if (!(0, _lang.isString)(prefix)) {
      throw new TypeError('Expected prefix to be a string.');
    }

    super(rest);

    /**
     * The command registry for the client.
     * @type {CommandRegistry}
     */
    this.commands = new _CommandRegistry2.default();

    /**
     * The client's service container.
     * @type {ServiceContainer}
     */
    this.services = new _ServiceContainer2.default();

    /**
     * The client's dispatcher.
     * @type {Dispatcher}
     * @private
     */
    this.dispatcher = new _Dispatcher2.default({ client: this, prefix });
  }
}
exports.default = Ghastly;